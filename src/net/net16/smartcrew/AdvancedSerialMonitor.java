package net.net16.smartcrew;

import com.fazecast.jSerialComm.SerialPort;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultCaret;
import org.apache.commons.io.IOUtils;

/**
 *
 * @author rohu7
 */
public class AdvancedSerialMonitor extends javax.swing.JFrame {

    /**
     * Creates new form AdvancedSerialMonitor
     */
    public AdvancedSerialMonitor() {
        initComponents();
        
        port = new SerialHandler (console);
        caret = (DefaultCaret)console.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        Action clearConsoleAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                console.setText("");
            }
        };
        
        clearConsole.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_L, InputEvent.CTRL_MASK),
                "clear"
        );
        clearConsole.getActionMap().put("clear", clearConsoleAction);
        
        Action startStopAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                AdvancedSerialMonitor.this.startStopActionPerformed(new ActionEvent(startStop, ActionEvent.ACTION_FIRST, ""));
            }
        };
        
        startStop.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_P, InputEvent.CTRL_MASK),
                "startStop"
        );
        startStop.getActionMap().put("startStop", startStopAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        about = new javax.swing.JFrame();
        jLabel10 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        portComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        startStop = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        clearLog = new javax.swing.JButton();
        baudRateSelector = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        decodeCharsetSelector = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        prompt = new javax.swing.JTextField();
        sendData = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        charsetSelector = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        chooseSendFile = new javax.swing.JButton();
        jlSendFile = new javax.swing.JLabel();
        sendFileButton = new javax.swing.JButton();
        jlSendError = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        chooseExportFile = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        cpToClipboard = new javax.swing.JButton();
        exportFileJl = new javax.swing.JLabel();
        exportToFile = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        errorExportFileJl = new javax.swing.JLabel();
        append = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        chooseStreamFile = new javax.swing.JButton();
        toggleStream = new javax.swing.JToggleButton();
        streamOverwrite = new javax.swing.JCheckBox();
        streamFileJl = new javax.swing.JLabel();
        jlStreamError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        selectFontSize = new javax.swing.JComboBox<>();
        clearConsole = new javax.swing.JButton();
        autoscroll = new javax.swing.JCheckBox();
        wordWrap = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        alwaysOnTopCheckBox = new javax.swing.JCheckBoxMenuItem();

        about.setTitle("About Advanced Serial Monitor");
        about.setAlwaysOnTop(true);
        about.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/info.png")).getImage());
        about.setResizable(false);
        about.setSize(new java.awt.Dimension(439, 300));
        about.setType(java.awt.Window.Type.POPUP);

        jLabel10.setText("<html><h2>Advanced Serial Monitor</h2></html");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imac.png"))); // NOI18N

        jLabel12.setText("<html><p>Robert Hutter<br />Version 1206<br />No rights reserved.</p></html>");

        jLabel13.setText("<html><div>Icons made by <a href=\"https://www.flaticon.com/authors/roundicons\" title=\"Roundicons\">Roundicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\" target=\"_blank\">CC 3.0 BY</a></div><br /><div>Icons made by <a href=\"https://www.flaticon.com/authors/smashicons\" title=\"Smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\" target=\"_blank\">CC 3.0 BY</a></div></html>");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aboutLayout = new javax.swing.GroupLayout(about.getContentPane());
        about.getContentPane().setLayout(aboutLayout);
        aboutLayout.setHorizontalGroup(
            aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutLayout.createSequentialGroup()
                .addGroup(aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aboutLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator4))
                    .addGroup(aboutLayout.createSequentialGroup()
                        .addGroup(aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(aboutLayout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(aboutLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(aboutLayout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        aboutLayout.setVerticalGroup(
            aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Advanced Serial Monitor");
        setBounds(new java.awt.Rectangle(100, 100, 1000, 850));
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/imac.png")).getImage());
        setMinimumSize(new java.awt.Dimension(891, 333));
        setSize(new java.awt.Dimension(1000, 850));

        jLabel2.setText("<html><h4>Port</h4></html>");

        jLabel3.setText("<html><h4>Baud rate</h4></html>");

        portComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        portComboBox.setToolTipText("Select a serial port to communicate on.");
        portComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                portComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });
        portComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setText("<html><h4>Start/stop monitor</h4></html>");

        log.setEditable(false);
        log.setColumns(20);
        log.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        log.setRows(5);
        jScrollPane2.setViewportView(log);

        jLabel8.setText("<html><h4>Log</h4></html>");

        startStop.setText("<html><h5>Start</h5></html>");
        startStop.setToolTipText("Use start/stop if you want to free up the current port for other usage. (CTRL+P)");
        startStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        clearLog.setText("Clear");
        clearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogActionPerformed(evt);
            }
        });

        baudRateSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "110", "300", "600", "1200", "2400", "4800", "9600", "14400", "19200", "38400", "57600", "115200", "128000", "256000" }));
        baudRateSelector.setSelectedItem("115200");
        baudRateSelector.setToolTipText("Choose the transmision speed to communicate on. [bit/s]");
        baudRateSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baudRateSelectorActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel9.setText("<html><h4>Decode charset</h4></html>");

        decodeCharsetSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "US-ASCII", "ISO-8859-1 ", "UTF-8", "UTF-16BE", "UTF-16LE", "UTF-16" }));
        decodeCharsetSelector.setToolTipText("Select the charset used to decode recived data.");
        decodeCharsetSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeCharsetSelectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baudRateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(startStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearLog)
                .addGap(14, 14, 14)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decodeCharsetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(clearLog))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(portComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(baudRateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(startStop, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(decodeCharsetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Preferances", jPanel6);

        prompt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        prompt.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        prompt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                promptActionPerformed(evt);
            }
        });

        sendData.setText("Send");
        sendData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendDataActionPerformed(evt);
            }
        });

        jLabel5.setText("<html><h4>Charset</h4><html>");

        charsetSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "US-ASCII", "ISO-8859-1 ", "UTF-8", "UTF-16BE", "UTF-16LE", "UTF-16" }));
        charsetSelector.setToolTipText("Select the charset used to encoded the data that will be transmitted.");
        charsetSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charsetSelectorActionPerformed(evt);
            }
        });

        jLabel6.setText("<html><h4>Send contents of file</h4></html>");

        chooseSendFile.setText("Choose file");
        chooseSendFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSendFileActionPerformed(evt);
            }
        });

        sendFileButton.setText("Send");
        sendFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileButtonActionPerformed(evt);
            }
        });

        jlSendError.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(prompt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendData))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(charsetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseSendFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlSendFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlSendError)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(charsetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseSendFile)
                    .addComponent(jlSendFile)
                    .addComponent(sendFileButton)
                    .addComponent(jlSendError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prompt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendData))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Send Data", jPanel4);

        jLabel14.setText("<html><h4>Export contents of console</h4></html>");

        chooseExportFile.setText("Choose file");
        chooseExportFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseExportFileActionPerformed(evt);
            }
        });

        jLabel15.setText("<html><h4>To file</h4></html>");

        cpToClipboard.setText("Copy to clipboard");
        cpToClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpToClipboardActionPerformed(evt);
            }
        });

        exportToFile.setText("Export");
        exportToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToFileActionPerformed(evt);
            }
        });

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        errorExportFileJl.setForeground(new java.awt.Color(255, 0, 0));

        append.setText("Overwrite");
        append.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chooseExportFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportToFile)
                        .addGap(6, 6, 6)
                        .addComponent(append))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(errorExportFileJl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportFileJl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cpToClipboard)
                .addContainerGap(478, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(629, 629, 629))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(chooseExportFile)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(exportFileJl)
                                    .addComponent(exportToFile)
                                    .addComponent(append, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(errorExportFileJl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator5))
                        .addGap(30, 30, 30))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(cpToClipboard)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Export Console", jPanel5);

        jLabel16.setText("<html><h4>Stream console</h4></html>");

        jLabel17.setText("<html><h4>To file</h4></html>");

        chooseStreamFile.setText("Choose file");
        chooseStreamFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseStreamFileActionPerformed(evt);
            }
        });

        toggleStream.setText("Steam");
        toggleStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleStreamActionPerformed(evt);
            }
        });

        streamOverwrite.setSelected(true);
        streamOverwrite.setText("Overwrite");
        streamOverwrite.setToolTipText("Overwrite flie when stream opens.");
        streamOverwrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamOverwriteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlStreamError, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chooseStreamFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleStream)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(streamOverwrite)))
                        .addGap(8, 8, 8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(streamFileJl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(623, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(streamFileJl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseStreamFile)
                        .addComponent(toggleStream)
                        .addComponent(streamOverwrite)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jlStreamError)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Stream Console", jPanel7);

        jLabel4.setText("<html><h2>Advanced Serial Monitor</h2></html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        console.setEditable(false);
        console.setColumns(20);
        console.setForeground(new java.awt.Color(109, 109, 109));
        console.setRows(22);
        jScrollPane1.setViewportView(console);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE))
        );

        jLabel1.setText("Font size");

        selectFontSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));
        selectFontSize.setSelectedItem("13");
        selectFontSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFontSizeActionPerformed(evt);
            }
        });

        clearConsole.setText("Clear");
        clearConsole.setToolTipText("Clears the console. (CTRL+L)");
        clearConsole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearConsoleActionPerformed(evt);
            }
        });

        autoscroll.setSelected(true);
        autoscroll.setText("Autoscroll");
        autoscroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoscrollActionPerformed(evt);
            }
        });

        wordWrap.setText("Linewrap");
        wordWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordWrapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(autoscroll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wordWrap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearConsole)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearConsole)
                    .addComponent(selectFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(autoscroll)
                    .addComponent(wordWrap))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info.png"))); // NOI18N
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(aboutMenuItem);

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Window");

        alwaysOnTopCheckBox.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        alwaysOnTopCheckBox.setText("Always on top");
        alwaysOnTopCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alwaysOnTopCheckBoxActionPerformed(evt);
            }
        });
        jMenu2.add(alwaysOnTopCheckBox);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFontSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFontSizeActionPerformed
        // TODO add your handling code here:
        console.setFont(new Font("Monospaced", Font.PLAIN,Integer.parseInt((String)selectFontSize.getSelectedItem())));
    }//GEN-LAST:event_selectFontSizeActionPerformed

    private void clearConsoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearConsoleActionPerformed
        // TODO add your handling code here:
        console.setText("");
    }//GEN-LAST:event_clearConsoleActionPerformed

    private void sendDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendDataActionPerformed
        // TODO add your handling code here:
        sendPrompt();
    }//GEN-LAST:event_sendDataActionPerformed

    private void clearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogActionPerformed
        // TODO add your handling code here:
        log.setText("");
    }//GEN-LAST:event_clearLogActionPerformed

    private void wordWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordWrapActionPerformed
        // TODO add your handling code here:
        console.setLineWrap(wordWrap.isSelected());
    }//GEN-LAST:event_wordWrapActionPerformed

    private void autoscrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoscrollActionPerformed
        // TODO add your handling code here
        if (autoscroll.isSelected())
        {
            console.setCaretPosition(console.getDocument().getLength());
            caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        }
        else
            caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
    }//GEN-LAST:event_autoscrollActionPerformed

    private void alwaysOnTopCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alwaysOnTopCheckBoxActionPerformed
        // TODO add your handling code here:
        setAlwaysOnTop(alwaysOnTopCheckBox.isSelected());
    }//GEN-LAST:event_alwaysOnTopCheckBoxActionPerformed

    private void startStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopActionPerformed
        // TODO add your handling code here:
        if(!port.isOpen())
        {
            // turn on serial comms
            startStop.setEnabled(false);
            if (!portComboBox.getSelectedItem().equals("Select"))
            {
                try
                {
                     port.open((String) portComboBox.getSelectedItem(), Integer.parseInt((String) baudRateSelector.getSelectedItem()), (String) decodeCharsetSelector.getSelectedItem());
                     log.append("Port "+(String)portComboBox.getSelectedItem() + " opened sucessfully.\n");
                     startStop.setText("<html><h5>Stop</h5></html>");
                     console.setForeground(new java.awt.Color(0, 0, 0));
                     startStop.setSelected(true);
                }
                catch (SerialException e)
                {
                    Logger.getLogger(AdvancedSerialMonitor.class.getName()).log(Level.SEVERE, null, e);
                    log.append ("Can't open port. Port busy.\n");
                    startStop.setSelected (false);
                }
                
            } else
            {
                log.append ("No port selected. Please select a port.\n");
                startStop.setSelected (false);
            }
            startStop.setEnabled(true);
        }
        else
        {
            // shut down serial comms
            stopComm();
            log.append ("Port closed.\n");
        }
    }//GEN-LAST:event_startStopActionPerformed

    private void portComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_portComboBoxPopupMenuWillBecomeVisible
        // TODO add your handling code here:
        log.append("Scanning ports...\n");
        SerialPort[] ports = SerialHandler.getCommPorts();
        portComboBox.removeAllItems();
        for (SerialPort port1 : ports) {
            portComboBox.addItem(port1.getSystemPortName());
        }
        
        if (portComboBox.getItemCount() < 1)
            portComboBox.addItem("Select");
        
    }//GEN-LAST:event_portComboBoxPopupMenuWillBecomeVisible

    private void portComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portComboBoxActionPerformed
        // TODO add your handling code here:
        updateComm();
    }//GEN-LAST:event_portComboBoxActionPerformed

    private void charsetSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charsetSelectorActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_charsetSelectorActionPerformed

    private void baudRateSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baudRateSelectorActionPerformed
        // TODO add your handling code here:
        updateComm();
    }//GEN-LAST:event_baudRateSelectorActionPerformed

    private void decodeCharsetSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeCharsetSelectorActionPerformed
        // TODO add your handling code here:
        updateComm();
    }//GEN-LAST:event_decodeCharsetSelectorActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        port.close();
        dispose();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void promptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_promptActionPerformed
        // TODO add your handling code here:
        sendPrompt();
    }//GEN-LAST:event_promptActionPerformed

    private void chooseSendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSendFileActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(AdvancedSerialMonitor.this);

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            sendFile = fileChooser.getSelectedFile();
            jlSendFile.setText(sendFile.getName());
            jlSendError.setText("");
        } else {
            jlSendFile.setText("");
            sendFile = null;
        }
    }//GEN-LAST:event_chooseSendFileActionPerformed

    private void sendFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFileButtonActionPerformed
        // TODO add your handling code here:
        if (sendFile != null)
        {
            try
            {
                
                port.send(IOUtils.toByteArray(new java.io.FileInputStream(sendFile)));
                jlSendError.setForeground(Color.green);
                jlSendError.setText("Contents of file sent.");
            } catch (java.io.IOException ioe)
            {
                jlSendError.setForeground(Color.red);
                jlSendError.setText("Error reading file. Please try again.");
            } catch (SerialException se)
            {
                jlSendError.setForeground(Color.red);
                jlSendError.setText("Can't send data. Port not open.");
            }
        } else
        {
            jlSendError.setForeground(Color.red);
            jlSendError.setText("No file choosen. Please choose a file.");
        }
    }//GEN-LAST:event_sendFileButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        about.setLocationRelativeTo(null);
        about.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        about.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void chooseExportFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseExportFileActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(AdvancedSerialMonitor.this);

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            exportFile = fileChooser.getSelectedFile();
            exportFileJl.setText(exportFile.getName());
            errorExportFileJl.setText("");
        } else {
            exportFileJl.setText("");
            exportFile = null;
        }
    }//GEN-LAST:event_chooseExportFileActionPerformed

    private void cpToClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpToClipboardActionPerformed
        // TODO add your handling code here:
        StringSelection stringSelection = new StringSelection(console.getText());
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
    }//GEN-LAST:event_cpToClipboardActionPerformed

    private void exportToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToFileActionPerformed
        // TODO add your handling code here:
        if (exportFile != null)
        {
            try {
                try (java.io.FileWriter fw = new java.io.FileWriter(exportFile, !append.isSelected())) {
                    fw.write(console.getText());
                    fw.flush();
                    errorExportFileJl.setForeground(Color.green);
                    errorExportFileJl.setText("Console exported.");
                }
            } catch (IOException ex) {
                Logger.getLogger(AdvancedSerialMonitor.class.getName()).log(Level.SEVERE, null, ex);
                errorExportFileJl.setForeground(Color.red);
                errorExportFileJl.setText("Can't open file. Please try again.");
            }
        }
        else
        {
            errorExportFileJl.setForeground(Color.red);
            errorExportFileJl.setText("No file selected. Please choose a file.");
        }
    }//GEN-LAST:event_exportToFileActionPerformed

    private void appendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appendActionPerformed

    private void chooseStreamFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseStreamFileActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(AdvancedSerialMonitor.this);

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            try {
                port.setStreamFile (fileChooser.getSelectedFile(), streamOverwrite.isSelected());
                streamFileJl.setText(port.getStreamFile().getName());
                jlStreamError.setText("");
            } catch (IOException ex) {
                jlStreamError.setForeground(Color.red);
                jlStreamError.setText("Can't open file. Please try again.");
            }
        } else {
            streamFileJl.setText("");
            try {
                port.setStreamFile(null, false);
            } catch (IOException ex) {
                // Nothing here. Internal error.
            }
        }
    }//GEN-LAST:event_chooseStreamFileActionPerformed

    private void streamOverwriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamOverwriteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_streamOverwriteActionPerformed

    private void toggleStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleStreamActionPerformed
        // TODO add your handling code here:
        if (port.isStreamOn())
        {
            port.setStreamOn(false);
            jlStreamError.setText("");
        }
        else
        {
            if (port.getStreamFile() != null)
            {
                port.setStreamOn(true);
                try {
                    port.setStreamFile(port.getStreamFile(), streamOverwrite.isSelected());
                    jlStreamError.setForeground (Color.green);
                    jlStreamError.setText("Stream opened.");
                } catch (IOException ex) {
                    Logger.getLogger(AdvancedSerialMonitor.class.getName()).log(Level.SEVERE, null, ex);
                    jlStreamError.setForeground(Color.red);
                    jlStreamError.setText("Can't open file. Please try again.");
                }
            }
            else
            {
                jlStreamError.setForeground(Color.red);
                jlStreamError.setText("No file selected. Please select a file.");
                toggleStream.setSelected(false);
            }
        }
    }//GEN-LAST:event_toggleStreamActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvancedSerialMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AdvancedSerialMonitor().setVisible(true);
        });
    }
    
    private void stopComm ()
    {
        port.close();
        startStop.setSelected(false);
        startStop.setText("<html><h5>Start</h5></html>");
        console.setForeground(new java.awt.Color(109,109,109));
    }
    
    private void updateComm ()
    {
        if (port.isOpen())
        {
            if (portComboBox.getItemCount() > 0)
            {
                if (!portComboBox.getSelectedItem().equals("Select"))
                    try
                    {
                        port.update((String) portComboBox.getSelectedItem(), Integer.parseInt((String) baudRateSelector.getSelectedItem()), (String) decodeCharsetSelector.getSelectedItem());
                    }
                    catch (Exception e)
                    {
                        log.append ("Port closed unexpectedly...\n");
                    }
                else
                {
                    log.append("Port closed unexpectedly...");
                    stopComm();
                }
            }
        }
    }
    
    private void sendPrompt ()
    {
        try
            {
                if (prompt.getText().length() > 0)
                {
                    port.send(prompt.getText().getBytes((String) charsetSelector.getSelectedItem()));
                    prompt.setText("");
                    jlSendError.setText("");
                }
                else
                {
                    jlSendError.setForeground(Color.red);
                    jlSendError.setText("You can't send nothing. Please enter something.");
                }

            } catch (SerialException se)
            {
                jlSendError.setForeground(Color.red);
                jlSendError.setText("Can't send data. Port not open.");
            } catch (UnsupportedEncodingException e)
            {
                jlSendError.setForeground(Color.red);
                jlSendError.setText("Can't send data. Please select another charset.\n");
            }
    }

    //<editor-fold>
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame about;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JCheckBoxMenuItem alwaysOnTopCheckBox;
    private javax.swing.JCheckBox append;
    private javax.swing.JCheckBox autoscroll;
    private javax.swing.JComboBox<String> baudRateSelector;
    private javax.swing.JComboBox<String> charsetSelector;
    private javax.swing.JButton chooseExportFile;
    private javax.swing.JButton chooseSendFile;
    private javax.swing.JButton chooseStreamFile;
    private javax.swing.JButton clearConsole;
    private javax.swing.JButton clearLog;
    private javax.swing.JTextArea console;
    private javax.swing.JButton cpToClipboard;
    private javax.swing.JComboBox<String> decodeCharsetSelector;
    private javax.swing.JLabel errorExportFileJl;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel exportFileJl;
    private javax.swing.JButton exportToFile;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jlSendError;
    private javax.swing.JLabel jlSendFile;
    private javax.swing.JLabel jlStreamError;
    private javax.swing.JTextArea log;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox<String> portComboBox;
    private javax.swing.JTextField prompt;
    private javax.swing.JComboBox<String> selectFontSize;
    private javax.swing.JButton sendData;
    private javax.swing.JButton sendFileButton;
    private javax.swing.JToggleButton startStop;
    private javax.swing.JLabel streamFileJl;
    private javax.swing.JCheckBox streamOverwrite;
    private javax.swing.JToggleButton toggleStream;
    private javax.swing.JCheckBox wordWrap;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
    
    private final SerialHandler port;
    private final DefaultCaret caret;
    private java.io.File sendFile;
    private java.io.File exportFile;
}
